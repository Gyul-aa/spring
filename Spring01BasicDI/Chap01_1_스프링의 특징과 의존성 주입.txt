#1. 스프링 프레임워크의 간략 역사
 : 프레임워크 = 뼈대나 근간을 이루는 코드들의 묶음
 #1-1. 장점
 : 개발에 필요한 구조를 이미 코드로 만들어 놓음
   = 반쯤 완성한 상태에서 필요한 부분을 조립하는 형태의 개발이 가능하다는 점 => 일정한 품질을 보장 => 개발 시간이 단축
   a. 클라이언트 중심 개발
   b. Light weight(경량 프레임워크)
     : 90년대말 복잡한 하드웨어적 구성이 필요한 프레임워크에 반대되는 개념으로 등장.
       => J2EE 너무 복잡하고 방대, 전체를 이해하고 개발하는 어려움
       => 특정 기능을 위주로 간단한 jar 파일등을 이용해 모든 개발이 가능하도록 구성된 프레임워크
   c. 생산성, 안정성, 다양한 개발 언어
 #1-2. 다른 프레임워크와 차별성
   a. 복잡함에 반기를 들어서 만들어진 프레임워크
   b. 웹 영역, DB영역등을 포함한 프로젝트 전체 구조를 설계할때 유용한 프레임워크
   c. 이클립스등 개발툴에 플러그인 지원이 빠르게 업데이트가 되는 장점이 있음
   
 #1-3. 스프링 주요 특징
   a. POJO(Plain Old Java Object)기반의 구성
     = Java 코드를 이용해서 객체를 구성하는 방식을 그래도 스프링에서 사용할 수 있음
     = 코드 개발시 개발자가 가장 일반적인 코드로 작성, 실행 => 생산성에 유리, 코드에 대한 테스트 작업도 유연하게 할수 있는 장점
   b. 의존성 주입(DI)
     = 의존성은 하나의 객체가 다른 객체 없이 제대로 된 역할을 할수 없다는 뜻임
     = 하나의 객체가 다른 객체의 상태에 따라 영향을 받는 다는것을 의미함
     => (예) A객체가 B객체 없이 동작이 불가능한 상황 == A가 B에 의존적이다라고 함
 	
 	(개념) 의존성 주입 = 어떤 객체가 필요한 객체를 외부에서 밀어 넣는것
 	                = A는 B가 필요하다는 신호만 보내고, B객체를 주입하는 것은 외부에서 이루어 지는 방식   
   c. 스프링 실행 원리
    : ApplicationContext가 존재
      = 필요한 객체들을 생성하고, 필요한 객체들을 주입하는 역할을 해 주는 구조
      = ApplicationContext가 관리하는 객체들 => '빈(Bean)'이라고 함.
      = 빈과 빈사이의 의존관계를 처리하는 방식은 어노테이션 설정, XML설정, Java설정이 있음
   
   d. 개발자들이 스프링을 이용하여 프로그래밍하는 방식
     : 객체와 객체를 분리해서 생성(모듈화)하고, 이러한 객체들을 엮는 (wiring)작업을 하는 형태로 개발함
     
 #1-4. AOP의 지원
   : 좋은 개발환경의 중요 원칙은 개발자가 비지니스 로직처리에만 집중할 수 있게 하는 것임.
     이를 위해 스프링 프레임워크를 이용한 개발에서는 '반복적인 코드'를 줄이고, 핵심 비즈니스 로직에만 집중할 수 있는 방법을 제공
     => 스프링에서는 AspcetJ 문법을 통해 작성가능
     
     a. 비즈니스 로직
     b. Crose-Concern = 횡단 관심사
      = 비즈니스 로직은 아니지만, 반드시 처리가 필요한 부분 => 트랜잭션, 로깅, 보안등 공통적으로 필요한 부분을 따로 사용하여 처리
      => AspectOrientedProgramming(AOP)는 횡단 관심사를 모듈로 분리하는 프로그래밍 패러다임임
  
  #1-5. 트랜잭션 지원
   : DB 이용시 반드시 신경써야 할 부분 
     = 하나의 업무가 여러 작업으로 이루어지는 경우의 트랜잭션 처리
     = 스프링은 트랜잭션 관리를 어노테이션, XML로 설정이 가능
     => 개발자가 매번 상황에 맞는 코드를 작성할 필요가 없도록 이미 설계되어 있음
     
     
 