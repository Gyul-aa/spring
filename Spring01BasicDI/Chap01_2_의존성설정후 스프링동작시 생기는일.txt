#2-1. xml을 이용하는 의존성 주입
  : 스프링은 클래스에서 객체를 생성, 객체들의 의존성에 대한 처리 작업까지 내부에서 모든것이 처리됨
    스프링에서 관리되는 객체 => 빈(Bean)이라 하고, 이에 대한 설정은 주로 XML을 이용해 처리 함. (Java설정도 가능)
    
  [처리 XML의 위치]
   a. src > webapp > WEB-INF > spring > root-context.xml
   b. root-context.xml 하단 탭 > NameSpaces 탭에서 context 항목 체크
   c. root-context.xml 하단 탭 > Source 탭에 관리할 패키지 등록
      (예) <context:component-scan base-package="org.zerock.sample"></context:component-scan>
   d. xml 저장후 확인
      root-context.xml 하단 탭 > Beans Graph 탭에서 Restraurant, Chef 객체 설정 확인
      
#2-2. 의존성 설정후 스프링 동작시 생기는 일
   #. 스프링 동작 방식을 이해하기 위해서는 (시간의 순서대로 생각)해 보는것이 중요함
     #a. 스프링 프레임워크가 시작되면,
         => 먼저, 스프링이 사용하는 메모리 영역을 만듦 = Context(컨텍스트)라고 함
         => 스프링에서는 ApplictionContext 객체가 만들어짐
     #b. 스프링은 자신이 객체를 생성하고 관리해야 하는 객체들에 대한 설정 파일을 찾음
         => 여기서는 root-context.xml 이 설정 파일임
     #c. root-context.xml에 설정되어 있는 context:component-scan 태그의 내용을 통해
         => 여기서는 org.zerock.sample 패키지 스캔
     #d. 해당 패키지의 클래스 중 @Component를 찾아서 인스턴스를 생성
     #e. Restraurant 객체에서 @Autowried 설정 객체 찾음 
         => 여기서는 Chef 객체
     #f. 스프링 프레임워크 = Chef 객체의 인스턴스를 Restraurant 객체에 주입함.(주입완료)
      
